//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiftAndShiftMvcApp.Web.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductManagement")]
    public interface IProductManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/DoWork", ReplyAction="http://tempuri.org/IProductManagement/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/DoWork", ReplyAction="http://tempuri.org/IProductManagement/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/AddProduct", ReplyAction="http://tempuri.org/IProductManagement/AddProductResponse")]
        bool AddProduct(LiftAndShiftApp.Models.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/AddProduct", ReplyAction="http://tempuri.org/IProductManagement/AddProductResponse")]
        System.Threading.Tasks.Task<bool> AddProductAsync(LiftAndShiftApp.Models.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/DeleteProduct", ReplyAction="http://tempuri.org/IProductManagement/DeleteProductResponse")]
        bool DeleteProduct(LiftAndShiftApp.Models.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/DeleteProduct", ReplyAction="http://tempuri.org/IProductManagement/DeleteProductResponse")]
        System.Threading.Tasks.Task<bool> DeleteProductAsync(LiftAndShiftApp.Models.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/GetAllProducts", ReplyAction="http://tempuri.org/IProductManagement/GetAllProductsResponse")]
        LiftAndShiftApp.Models.Models.ProductModel[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManagement/GetAllProducts", ReplyAction="http://tempuri.org/IProductManagement/GetAllProductsResponse")]
        System.Threading.Tasks.Task<LiftAndShiftApp.Models.Models.ProductModel[]> GetAllProductsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductManagementChannel : LiftAndShiftMvcApp.Web.ProductServiceReference.IProductManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductManagementClient : System.ServiceModel.ClientBase<LiftAndShiftMvcApp.Web.ProductServiceReference.IProductManagement>, LiftAndShiftMvcApp.Web.ProductServiceReference.IProductManagement {
        
        public ProductManagementClient() {
        }
        
        public ProductManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool AddProduct(LiftAndShiftApp.Models.Models.ProductModel product) {
            return base.Channel.AddProduct(product);
        }
        
        public System.Threading.Tasks.Task<bool> AddProductAsync(LiftAndShiftApp.Models.Models.ProductModel product) {
            return base.Channel.AddProductAsync(product);
        }
        
        public bool DeleteProduct(LiftAndShiftApp.Models.Models.ProductModel product) {
            return base.Channel.DeleteProduct(product);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProductAsync(LiftAndShiftApp.Models.Models.ProductModel product) {
            return base.Channel.DeleteProductAsync(product);
        }
        
        public LiftAndShiftApp.Models.Models.ProductModel[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<LiftAndShiftApp.Models.Models.ProductModel[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
    }
}
